#!/usr/bin/env python3
"""
Auto-detect MATLAB installation and generate .env file.

This script:
1. Searches for MATLAB installations on your system
2. Detects the correct library path and architecture
3. Creates a .env file with the appropriate settings
"""

import os
import platform
import sys
from pathlib import Path


def get_architecture():
    """Determine the system architecture."""
    system = platform.system()
    machine = platform.machine().lower()

    if system == "Darwin":  # macOS
        # Check if Apple Silicon or Intel
        if machine in ("arm64", "aarch64"):
            return "maca64"  # Apple Silicon
        else:
            return "maci64"  # Intel
    elif system == "Linux":
        return "glnxa64"  # Linux 64-bit
    elif system == "Windows":
        return "win64"
    else:
        return None


def find_matlab_installations():
    """Find all MATLAB installations on the system."""
    installations = []
    system = platform.system()

    if system == "Darwin":  # macOS
        # Check /Applications
        app_dir = Path("/Applications")
        matlab_apps = sorted(app_dir.glob("MATLAB_R*.app"), reverse=True)

        for matlab_app in matlab_apps:
            installations.append({
                "path": matlab_app,
                "version": matlab_app.name.replace("MATLAB_", "").replace(".app", "")
            })

    elif system == "Linux":
        # Common Linux installation paths
        search_paths = [
            Path("/usr/local/MATLAB"),
            Path.home() / "MATLAB",
        ]

        for search_path in search_paths:
            if search_path.exists():
                matlab_dirs = sorted(search_path.glob("R*"), reverse=True)
                for matlab_dir in matlab_dirs:
                    installations.append({
                        "path": matlab_dir,
                        "version": matlab_dir.name
                    })

    elif system == "Windows":
        # Common Windows installation paths
        program_files = [
            Path("C:/Program Files/MATLAB"),
            Path("C:/Program Files (x86)/MATLAB"),
        ]

        for pf in program_files:
            if pf.exists():
                matlab_dirs = sorted(pf.glob("R*"), reverse=True)
                for matlab_dir in matlab_dirs:
                    installations.append({
                        "path": matlab_dir,
                        "version": matlab_dir.name
                    })

    return installations


def get_library_path(matlab_path, arch):
    """Get the library path for a MATLAB installation."""
    system = platform.system()

    if system == "Darwin":  # macOS
        return matlab_path / "bin" / arch
    elif system == "Linux":
        return matlab_path / "bin" / arch
    elif system == "Windows":
        return matlab_path / "bin" / arch
    else:
        return None


def create_env_file(matlab_path, arch):
    """Create .env file with MATLAB configuration."""
    project_root = Path(__file__).parent.parent
    env_file = project_root / ".env"

    lib_path = get_library_path(matlab_path, arch)
    system = platform.system()

    # Determine the environment variable name
    if system == "Darwin":
        env_var_name = "DYLD_LIBRARY_PATH"
    elif system == "Linux":
        env_var_name = "LD_LIBRARY_PATH"
    elif system == "Windows":
        env_var_name = "PATH"
    else:
        print(f"❌ Unsupported platform: {system}")
        return False

    # Check if .env already exists
    if env_file.exists():
        response = input("\n.env file already exists. Overwrite? (y/N): ")
        if response.lower() != 'y':
            print("Cancelled.")
            return False

    # Create .env file
    content = f"""# MATLAB MCP Server - Environment Configuration
# Auto-generated by setup_matlab_env.py

# MATLAB Installation: {matlab_path}
# Architecture: {arch}
# System: {system}

{env_var_name}={lib_path}

# To use this configuration:
#   uv run --env-file .env matlab-cli -c "disp('Hello')"
#   uv run --env-file .env matlab-mcp
"""

    try:
        env_file.write_text(content)
        return True
    except Exception as e:
        print(f"❌ Error creating .env file: {e}")
        return False


def main():
    print("=" * 70)
    print("MATLAB Environment Setup")
    print("=" * 70)

    # Check architecture
    arch = get_architecture()
    if arch is None:
        print("\n❌ Could not determine system architecture")
        sys.exit(1)

    print(f"\nDetected architecture: {arch}")

    # Find MATLAB installations
    print("\nSearching for MATLAB installations...")
    installations = find_matlab_installations()

    if not installations:
        print("\n❌ No MATLAB installations found!")
        print("\nDefault installation locations:")
        print("  • macOS:   /Applications/MATLAB_R*.app")
        print("  • Linux:   /usr/local/MATLAB/R*")
        print("  • Windows: C:\\Program Files\\MATLAB\\R*")
        print("\nIf MATLAB is installed in a custom location,")
        print("manually create a .env file based on .env.example")
        sys.exit(1)

    print(f"\n✅ Found {len(installations)} MATLAB installation(s):\n")

    for i, install in enumerate(installations, 1):
        lib_path = get_library_path(install['path'], arch)
        lib_exists = lib_path.exists() if lib_path else False

        print(f"{i}. MATLAB {install['version']}")
        print(f"   Path: {install['path']}")
        print(f"   Library: {lib_path}")
        print(f"   Status: {'✅ Found' if lib_exists else '❌ Missing'}")
        print()

    # Select installation
    if len(installations) == 1:
        print("Using the only available installation.\n")
        selected = installations[0]
    else:
        while True:
            try:
                choice = input(f"Select installation (1-{len(installations)}): ")
                idx = int(choice) - 1
                if 0 <= idx < len(installations):
                    selected = installations[idx]
                    break
                else:
                    print(f"Please enter a number between 1 and {len(installations)}")
            except (ValueError, KeyboardInterrupt):
                print("\nCancelled.")
                sys.exit(1)

    # Verify library path exists
    lib_path = get_library_path(selected['path'], arch)
    if not lib_path.exists():
        print(f"\n⚠️  Warning: Library path does not exist: {lib_path}")
        response = input("Continue anyway? (y/N): ")
        if response.lower() != 'y':
            print("Cancelled.")
            sys.exit(1)

    print(f"\n✅ Selected: MATLAB {selected['version']}")
    print(f"   Path: {selected['path']}")
    print(f"   Library: {lib_path}\n")

    # Create .env file
    print("Creating .env file...")
    if create_env_file(selected['path'], arch):
        project_root = Path(__file__).parent.parent
        env_file = project_root / ".env"

        print(f"\n✅ Created: {env_file}")
        print("\n" + "=" * 70)
        print("Setup Complete!")
        print("=" * 70)
        print("\nYou can now use MATLAB MCP Server with:")
        print("\n  uv run --env-file .env matlab-cli -c \"disp('Hello!')\"")
        print("  uv run --env-file .env matlab-mcp")
        print("\nOr set UV_ENV_FILE to use .env automatically:")
        print("\n  export UV_ENV_FILE=.env")
        print("  uv run matlab-cli -c \"disp('Hello!')\"")
        print("\n" + "=" * 70)
    else:
        sys.exit(1)


if __name__ == "__main__":
    main()
